Functional Programming

--------------------------------------------------------------------------------
The basic concept
--------------------------------------------------------------------------------

1.  No side effects

    - No mutation of variables
    
    - No printing to the console or to any device
    
    - No writing to files, databases, networks, or whatever
    
    - No exception throwing
    
    
2.  Functions are black boxes that

    - Take an argument (a single one, as you’ll see later)
    
    - Do mysterious things inside, such as mutating variables and a lot of 
      imperativestyle stuff, but with no effect observable from outside
      
    - Return a (single) value
    
3.  In practice, it’s impossible for a function to have no side effects at all

    - A function will cause writing to memory, registering mutations, thread 
      launching, context switching, and other sorts of things that are indeed 
      effects observable from outside
      
    - observable: that can be seen or noticed
    
4.  Functional programming is writing programs with no intentional side effects

    - intentional: done in a way that was planned, not by chance 

    - Means that side effects that are part of the expected outcome of the 
      program 
      
    - There should also be as few non-intentional side effects as possible
    
5.  Referentially Transparent

    - Code that doesn’t mutate or depend on the external world is said to be 
      referentially transparent

    - Having no side effects (and thus not mutating anything in the external 
      world) isn’t enough for a program to be functional
      
    - Functional programs must also not be affected by the external world
    
    - The output of a functional program must depend only on its argument
    
    - Functional code may not read data from the console, a file, a remote URL, 
      a database, or even from the system
      
6.  Properties Referentially Transparent

    - Self-contained:
    
      - Doesn’t depend on any external device to work 
      
      - Can use it in any context 
      
        - All have to do is provide a valid argument
    
    - Deterministic, which means it will always return the same value for the 
      same argument
      
    - Never throw any kind of Exception
    
    - Won’t create conditions causing other code to unexpectedly fail
    
      - Won’t mutate arguments or some other external data, causing the caller
        to find itself with stale data or concurrent access exceptions
    
    - Won’t hang because some external device
    
    
7.  The benefits of FP

    - Functional programs are easier to reason about 推理 because they’re 
      deterministic
      
    - Eeasier to test
    
    - Are more modular
    
      - No side effects to handle
      
      - No exceptions to catch
      
      - No context mutation to deal with
      
      - No shared mutable state 
      
      - No concurrent modifications
    
    - Makes composition and recombination much easier
    
      - All functions are referentially transparent, they can then be reused to 
        build other programs without any modifications
        
    - Functional programs are inherently thread-safe because they avoid 
      mutation of shared state 
      
      - This doesn’t mean that all data has to be immutable 
      
      - Shared data must be
      
      - Immutable data is always safer, even if the mutation is not visible 
        externally
        
8.  Functional programming replaces side effects with returning a 
    representation of these effects
    
9.  Pushing abstraction to the limit


10. Summary

    - Functional programming is programming with functions, returning values, 
      and having no side effects
      
    - Functional programs are easy to reason about and easy to test
    
    - Functional programming offers a high level of abstraction and reusability
    
    - Functional programs are more robust than their imperative counterparts
    
    - Functional programs are safer in multithreading environments because they
      avoid shared mutable state
